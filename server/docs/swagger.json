{
  "swagger": "2.0",
  "info": {
    "title": "Bus Booking System API",
    "version": "1.0.0",
    "description": "API Documentation for Bus Booking System"
  },
  "host": "janusha-api-bus.netlify.app",
  "basePath": "/api",
  "schemes": ["https"],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter your bearer token in the format: Bearer <token>"
    }
  },
  "paths": {
    "/booking/bookings": {
      "get": {
        "security": [{"Bearer": []}],
        "description": "Fetch all Bookings",
        "tags": ["Booking"],
        "responses": {
          "200": {
            "description": "List of all Bookings",
            "schema": {
              "type": "array"
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "description": "Create a new user account",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "User",
            "in": "body",
            "description": "User details for signup",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User account created successfully"
          },
          "400": {
            "description": "Invalid input or user already exists"
          },
          "404": {
            "description": "Invalid organization registered ID"
          },
          "409": {
            "description": "User with given NIC or email already exists"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "description": "User login to get a JWT token",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "Credentials",
            "in": "body",
            "description": "User credentials (email and password)",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JWT token for the logged-in user"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/auth/signout": {
      "post": {
        "description": "Logs out the user by clearing the authentication cookie",
        "tags": ["Authentication"],
        "responses": {
          "200": {
            "description": "Successfully logged out and cookie cleared"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": ["NICnumber", "fullName", "email", "password", "roleID"],
      "properties": {
        "NICnumber": {
          "type": "string",
          "description": "User's unique National Identity Card number"
        },
        "fullName": {
          "type": "string",
          "description": "Full name of the user"
        },
        "email": {
          "type": "string",
          "description": "Email address of the user"
        },
        "password": {
          "type": "string",
          "description": "User's password (must meet complexity requirements)"
        },
        "roleID": {
          "type": "string",
          "description": "ID of the role assigned to the user"
        },
        "contactNumber": {
          "type": "string",
          "description": "Contact number of the user"
        },
        "organizationRegisteredId": {
          "type": "string",
          "description": "Organization ID if the user is an operator (optional)"
        }
      }
    },
    "Credentials": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "description": "Email address of the user"
        },
        "password": {
          "type": "string",
          "description": "User's password"
        }
      }
    }
  }
}
